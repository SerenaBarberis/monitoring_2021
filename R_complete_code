1- R_first_code
2- R_code_energy.r
3- R_code_exam_simulation.r
4- R_code_multivar.r
5- R_code_plot_ecol_var.r
6- R_code_point_pattern_analysis.r
7- R_code_remote_sensing.r
8- R_code_sdm.r
9- R_code_chemical_cycles_pollution.r
10- R_spatial.r

### 1- R_first_code  ###
#write whatever you want here!

# this is an array
primates<-c(3,5,9,15,40)
primates

#new set:
crabs<-c(100,70,30,10,5)
crabs

#fisrt plot in R
plot(primates,crabs) #primate on the x axis, crabs on the y

plot(primates,crabs, col='blue')

plot(primates,crabs, col='blue', pch=19) #pch change form of the point in the graph

plot(primates,crabs, col='blue', pch=19, cex=2) #cex: characters exageration, increase che dimension of the point

plot(primates,crabs, col='blue', pch=19, cex=6)

plot(primates,crabs, col='blue', pch=19, cex=6, main='My first ecological graph in R!') #main: title for the graph

#create a dataframe
ecoset<-data.frame(primates,crabs) #make a table 
ecoset

#ecological numbers
#mean number of individuals per site
(3+5+9+15+40)/5

#summary of the dataframe
summary(ecoset)


### 2- R_code_energy.r ###

install.packages('rasterdiv')
library(rasterdiv)
library(raster)

data(copNDVI)

plot(copNDVI)

copNDVI <- reclassify (copNDVI, cbind(253:255, NA)) #cleaned the blue and brown part

plot (copNDVI)

install.packages ('rasterVis')

library (rasterVis)

levelplot (copNDVI) #the graph show the highest and lowest energy in the world

#change colour
clymin <- colorRampPalette (c('yellow', 'red', 'blue'))(100)
plot (copNDVI, col=clymin)

clymed <- colorRampPalette (c('red', 'yellow', 'blue'))(100)
plot (copNDVI, col=clymed)

clymax <- colorRampPalette (c('blue', 'red', 'yellow'))(100)
plot (copNDVI, col=clymax)  #our eyes catching the yellow and catch the high biomass

#multiframe

par(mfrow=c(1,2))
clymed <- colorRampPalette (c('red', 'yellow', 'blue'))(100)
plot (copNDVI, col=clymed)
clymax <- colorRampPalette (c('blue', 'red', 'yellow'))(100)
plot (copNDVI, col=clymax)

dev.off

### make a zoom in a specific part of the planet ###
#decide the extension with xmin xmax ymin ymax

italy_ext <- c(0,20,35,55) #longitude (x) 0,20 and latitude(y) 33,55

#assign the crop to a new name
copNDVI_Italy <- crop(copNDVI, italy_ext)

plot (copNDVI_Italy, col=clymax)


##### Deforestation example

#setwd()

library(raster)
library (RStoolbox)

defor1 <- brick ('defor1.jpg')  #brick imported a satellite image (function raster only a layer). min e max values are the bit

# band1: NIR, defor1.1
# band2: red, defor1.2
# band3: green

plotRGB (defor1, r=1, g=2, b=3, stretch='lin') #if i inverted the number changes the colour of image in fluo green or blue, ecc

#exercise: import the defor2.jpg

defor2 <- brick ('defor2.jpg')

plotRGB (defor2, r=1, g=2, b=3, stretch='lin')

# Exercise: put images one beside the other with par()

par(mfrow=c(2,1))
plotRGB (defor1, r=1, g=2, b=3, stretch='lin')
plotRGB (defor2, r=1, g=2, b=3, stretch='lin')


# how to calculate the vegetation index
#defor1 is composed by nir (defor1_.1), red (defor1_.2) and green (defor1_.3), for each pixel is calculated the difference between nir and red (dvi)

# dvi for the first period
dvi1 <- defor1$defor1.1 - defor1$defor1.2
plot(dvi1)
# change color
cl <- colorRampPalette (c('darkblue', 'yellow', 'red', 'black' ))(100)
plot (dvi1, col=cl)

#dvi after the cut
dvi2 <- defor2$defor2.1 - defor2$defor2.2
plot (dvi2, col=cl)

#par
par(mfrow=c(2,1))
plot (dvi1, col=cl, main='DVI before cut')
plot (dvi2, col=cl, main='DVI after cut')

# difference between dvi1 and dvi2 (decrease of biomass and capacity to photosynthesis (difference biomass before cut and after cut)
difdvi <- dvi1 - dvi2
dev.off()
plot(difdvi)

#change color
cldif <- colorRampPalette (c('blue', 'white', 'red'))(100)
plot (difdvi, col=cldif, main= 'amount of energy lost') #show the amount of biomass during the cut

hist(difdvi, col='red') #the positive values are more than negative, it means a big decrease of biomass

# final par (6 different maps togheter)
#defor1
#defor2
#dvi1
#dvi2
#difdvi
#histogram

par(mfrow=c(3,2))
plotRGB (defor1, r=1, g=2, b=3, stretch='lin')
plotRGB (defor2, r=1, g=2, b=3, stretch='lin')
plot (dvi1, col=cl, main='DVI before cut')
plot (dvi2, col=cl, main='DVI after cut')
plot (difdvi, col=cld, main= 'amount of energy lost')
hist(difdvi, col='red')


### 3- R_code_exam_simulation.r  ###

#nc data: we need library ncdf4
# https://cran.r-project.org/web/packages/ncdf4/index.html

install.packages('ncdf4')

library(ncdf4)
library(raster)
#setwd()

#import the images

tjan <- raster('c_gls_LST10-DC_202101010000_GLOBE_GEO_V1.2.1.nc')

plot(tjan)

#Exercise: change colorramppalette

cltjan <- colorRampPalette (c('blue', 'green', 'red'))(100)

plot (tjan, col=cltjan)

toct <- raster('c_gls_LST10-DC_202010010000_GLOBE_GEO_V1.2.1.nc')

plot(toct)

cltjan <- colorRampPalette (c('blue', 'green', 'red'))(100)

plot (toct, col=cltjan)

#difference between the two temperature

dift <- tjan - toct

cldif <- colorRampPalette (c('blue', 'white', 'red'))(100) 

plot (dift, col= cldif)


### 4- R_code_multivar.r ###

install.packages("vegan")
library(vegan)

#(setwd)

load('biomes_multivar.RData')
ls() #list of the file in the workspace

# Plot per species matrix
head(biomes)

# how the species are link to each other -> DEtrended CORrespondence ANAlysis: decorana

multivar<-decorana(biomes)
multivar

plot (multivar) #do not close the graph

ls()

head (biomes_types)

# biomes names in the graph:

attach(biomes_types)

ordiellipse (multivar, type, col=c('black', 'red', 'green', 'blue'), kind = 'ehull', lwd=3) # put the ellipse in the ordination. kind-> the shape we want to use. this function put in the graph an ellipse that links the data to the biome

# put the names on the ellipse-> function ordispider->link the species to the biome. label=T-> show the names

ordispider(multivar, type, col=c ('black', 'red', 'green', 'blue'), label=T)

#export the image of the graph

pdf('multivar.pdf')
plot (multivar)
ordiellipse (multivar, type, col=c('black', 'red', 'green', 'blue'), kind = 'ehull', lwd=3) 
ordispider(multivar, type, col=c ('black', 'red', 'green', 'blue'), label=T)
dev.off()


### 5- R_code_plot_ecol_var.r  ###

install.packages('sp')
library(sp)

#data is use to recall dataset
data(meuse)
meuse
# View->show the data in a different window
View(meuse)

head(meuse)

#Exercise: mean of all of the variables?
summary(meuse)

#Exercise: plot zinc  (y) against cadmuim (x)
#$->use to link different elements of the data
plot(meuse$cadmium,meuse$zinc)

attach(meuse)
plot(cadmium,zinc)

plot(cadmium,lead)

#scatterplot matrices
pairs (meuse)

#Question: peiring only the elements part of the dataset: how to do that?
#only with cadmium,copper,lead,zinc...

###Lecture n.2 on ecological variables###

#exercise
#Recall the package sp, recall the dataset meuse

library(sp)
data(meuse)

pairs(meuse)

head(meuse)

#cadmium copper lead zinc
#pairs with soil variables
#from colomn 3 to colomn 6

pairs(meuse[,3:6])

#let's use the names of the columns
pairs(~cadmium+copper+lead+zinc, data=meuse)

#let's prettify the graph
#Exercise: just use cadmium, lead and zinc
pairs(~cadmium+lead+zinc, data=meuse)

#Exercise: change the color
pairs(~cadmium+copper+lead+zinc, data=meuse, col='red')

#Exercise: change the symbol to filled triangles: pch
pairs(~cadmium+copper+lead+zinc, data=meuse, col='red',pch=17)

#exercise: increase the size of the triangles
pairs(~cadmium+copper+lead+zinc, data=meuse, col='red',pch=17,cex=3)


### 6- R_code_point_pattern_analysis.r ###

install.packages('spatstat')
library(spatstat)

######### IMPORT DATA FROM AN EXTERNAL SOURCE

# setwd("path/lab")

# setwd for Windows
# setwd("C:/lab/")

covid <- read.table("covid_agg.csv", header=TRUE)
covid

# Now let's see the density of the covid data (how mush dense are the point)
# let's make a planar point pattern in spatstat
attach(covid)
# for ppp function: x,y and ranges (max and min) of lon and lat
covid_planar <-ppp(lon, lat, c(-180,180), c(-90,90))

density_map <- density(covid_planar)

plot(density_map)  #show in the graph the density of the data

points (covid_planar) #show the point on the density map

#change the range colour of density map
cl <- colorRampPalette(c('yellow','orange','red'))(100) # 100->amount of different colour inside the palette
plot(density_map, col=cl)
points (covid_planar)

# Exercise: change the colour of the map
cl <- colorRampPalette(c('blue','yellow','orange','red','magenta'))(100) #100->number of colours of the range palette
plot(density_map, col=cl)
points (covid_planar)

# Putting the countries on top of the map
install.packages('rgdal')

library(rgdal)

coastlines <- readOGR('ne_10m_coastline.shp') 

##Replot the density map

#cl <- colorRampPalette(c('blue','yellow','orange','red','magenta'))(100)
plot(density_map, col=cl)
points (covid_planar)
plot(coastlines, add=TRUE) #true/folds-> plot the image on the top of the previews map and not in a different window

#change the point type--->phc=19
plot(density_map, col=cl)
points (covid_planar, pch=19, cex=0.5)
plot(coastlines, add=TRUE)

#Save the map as an png
png ('figure1.png')
cl <- colorRampPalette(c('blue','yellow','orange','red','magenta'))(100)
plot(density_map, col=cl)
points (covid_planar, pch=19, cex=0.5)
plot(coastlines, add=TRUE)
dev.off()

#save as pdf
pdf('figur.pdf')
cl <- colorRampPalette(c('blue','yellow','orange','red','magenta'))(100)
plot(density_map, col=cl)
points (covid_planar, pch=19, cex=0.5)
plot(coastlines, add=TRUE)
dev.off()


#Interpolate case data

marks(covid_planar) <- cases  #link the cases to the marks
cases_map <- Smooth(covid_planar)

plot(cases_map, col=cl)
points(covid_planar)
plot(coastlines, add=T)  #the density is oriented to china because there are the high number of cases


##### Plotting points with different size related to covid data together with the interpolated map

library(spatstat)

library (rgdal)

covid <- read.table('covid_agg.csv', header=TRUE) # or read.csv

head(covid)

attach(covid)  #if you don't attach: covid$lon
covid_planar <-ppp(lon, lat, c(-180,180), c(-90,90))

marks(covid_planar) <- cases 
cases_map <- Smooth(covid_planar)

cl <- colorRampPalette(c('lightpink2', 'lightsalmon', 'tomato1', 'red3', 'maroon'))(100)

### name of colour in R-> https://www.datanovia.com/en/blog/r-colors-amazong-resources-you-want-to-know/

plot(cases_map, col=cl)

###
install.packages('sf')
library(sf)

Spoints <- st_as_sf(covid, coords = c('lon', 'lat'))  

plot(Spoints, cex=Spoints$cases, col = 'purple3', lwd =3, add=T)  #lwd=line of the different points   #the points are out of map because represent the dimension of value

plot(cases_map, col=cl)
plot(Spoints, cex=Spoints$cases/10000, col = 'purple3', lwd =3, add=T)  #/10000 to reduce the dimension of the points

# put the coastline on the map

library(rgdal)
#put a smoother to the coastlines by resampling
coastlines <- readOGR('ne_10m_coastline.shp')
plot(coastlines, add=T)


##### Leonardo Zabotti data
 
#setwd()

leo <- read.table('dati_zabotti.csv', head=T, sep=',') #head=header

head(leo)

attach(leo)

library(spatstat)

summary(leo)

leo_ppp <- ppp (x,y,c(2300000, 2325000), c(5005000, 5045000)) # range of x and range of y (min and max)

plot(leo_ppp)

density_map <- density(leo_ppp)
plot(density_map)
points(leo_ppp)
 #save workspace
q()


###### Interpolation of students data #######

setwd()

load('point_pattern_analysis.RData') #

ls() #list of file in the .Rdata

head(leo)

library(spatstat)
attach(leo)
marks(leo_ppp) <- chlh #explain to R the variable that we want to use

chlh_map <- Smooth(leo_ppp)
cl <- colorRampPalette(c('yellow' , 'orange' , 'red' , 'green'))(100)
plot(chlh_map, col=cl)
points(leo_ppp)

# Exercise: do the same for chlorophil chlh in the sediment

marks(leo_ppp) <- chls
chls_map <- Smooth (leo_ppp)
plot (chls_map, col=cl)
points (leo_ppp)

# multipanel

par (mfrow=c(1,3))
 
# first graph: density map
plot (density_map, col=cl)
points (leo_ppp)

# second graph: chlh
plot(chlh_map, col=cl)
points(leo_ppp)

# third graph
plot (chls_map, col=cl)
points (leo_ppp)

# Exercise: build a multipane with 3 rows and 1 column

par (mfrow = c(3,1))

# first graph: density_ map
plot (density_map, col=cl)
points (leo_ppp)

# second graph: chlh
plot(chlh_map, col=cl)
points(leo_ppp)

# third graph
plot (chls_map, col=cl)
points (leo_ppp)


### 7- R_code_remote_sensing.r ###

# R code for remote sensing data analysis to monitor ecosystem changes in space and time

install.packages(c('raster', 'RStoolbox'))
###################################################################################################
#08/01/2021

library(raster)
library(RStoolbox)

#setwd()

brick ('p224r63_2011_masked.grd') #1499 and 2967 are the line and column, 4447533 are the pixel,7=layers/bands of colour

p224r63_2011 <-  brick ('p224r63_2011_masked.grd')

p224r63_2011 

plot(p224r63_2011) #the colour is default

#put a different color in the plot

cl <- colorRampPalette (c('black', 'grey', 'light grey')) (100)

plot (p224r63_2011, col=cl)

#######
#How to connect many images
par (mfrow=c(2,2))

clb <- colorRampPalette (c('dark blue', 'blue', 'light blue')) (100)

plot (p224r63_2011$B1_sre, col=clb)  #give the colour rampalette blu to the band b1_sre

# for b2_sre -> green

clg <- colorRampPalette (c('dark green', 'green', 'light green')) (100)

plot (p224r63_2011$B2_sre, col=clg)  

#for b3_sre ->red

clr <- colorRampPalette (c('dark red', 'red', 'pink')) (100)

plot (p224r63_2011$B3_sre, col=clr) 

#plot the final band b4_sre

clnir <- colorRampPalette (c('red', 'orange', 'yellow')) (100)

plot (p224r63_2011$B4_sre, col=nir) 

#bands to rgb (human eyes). using only 3 bands for time

plotRGB (p224r63_2011, r=3, g=2, b=1, stretch='lin') 

plotRGB (p224r63_2011, r=4, g=3, b=2, stretch='lin') #remove blue, put nir

plotRGB (p224r63_2011, r=3, g=4, b=2, stretch='lin') #4 in the green

plotRGB (p224r63_2011, r=3, g=2, b=4, stretch='lin') #4 in the blue

#

par (mfrow=c(2,2))
plotRGB (p224r63_2011, r=3, g=2, b=1, stretch='lin') 
plotRGB (p224r63_2011, r=4, g=3, b=2, stretch='lin') 
plotRGB (p224r63_2011, r=3, g=4, b=2, stretch='lin') 
plotRGB (p224r63_2011, r=3, g=2, b=4, stretch='lin')


### 8- R_code_sdm.r ###

## R code sdm -> space distribution model: make a model based on data takes on the field and then make a map

library(sdm)
library(raster)
library(rgdal)

#system.file ->catch file in a certain library
#import the species data
file <- system.file('external/species.shp',package='sdm')
species <- shapefile(file) #or readOGR function
species

plot(species,pch=17)

species$Occurrence #show the present and absence

#different color for present and absence in the plot
plot(species[species$Occurrence == 1,], col='blue', pch=16) #==->sql code #select only the occurrence with 1 not 0
points(species[species$Occurrence == 0,], col='red', pch=16) # value 0

# predictors: look at the path
path <- system.file('external', package='sdm')

#list the predictor
lst <- list.files (path=path, pattern='asc$', full.names = T) # pattern=asc -> see the file with asc extension #make a list of data with asc extension
lst #4 predictors: elevation, precipitation , temperature and vegetation

#stack
preds <- stack(lst) #put togheter the asc file predictors

# plot preds
cl <- colorRampPalette(c('blue', 'orange', 'red', 'yellow'))(100)
plot(preds, col=cl)

#plot predictors and occurrence
plot(preds$elevation, col=cl)
points(species[species$Occurrence == 1,], col='black', pch=17)

plot(preds$temperature, col=cl)
points(species[species$Occurrence == 1,], col='black', pch=17)

plot(preds$vegetation, col=cl)
points(species[species$Occurrence == 1,], col='black', pch=17)

plot(preds$precipitation, col=cl)
points(species[species$Occurrence == 1,], col='black', pch=17)

#make the model

# set the data for the sdm
datasdm <- sdmData(train=species, predictors=preds) #sdm data function create the object put in the model (the manner to see the data)
datasdm

#model: put the occurrence in relation of predictors
m1<- sdm(Occurrence ~ elevation + precipitation + temperature + vegetation, data=datasdm, methods= 'glm') #

#make the raster output layer
p1 <- predict(m1, newdata=preds) #predict function -> make the final prediction

#plot the output
plot(p1, col=cl)
points(species[species$Occurrence == 1,], pch=16)  #red and yellow represent the high probability to find the species there

#add to the stack: put all togheter the prediction
s1 <-stack(preds, p1)
plot (s1, col=cl) #the 5° image is the probability to find the species


### 9- R_code_chemical_cycles_pollution.r ###
# R_code_chemical_cycles_pollution.r #

#setwd()

library (raster)

#import the EN image
EN01 <- raster('EN_0001.png')
EN02 <- raster('EN_0002.png')
EN03 <- raster('EN_0003.png')
EN04 <- raster('EN_0004.png')
EN05 <- raster('EN_0005.png')
EN06 <- raster('EN_0006.png')
EN07 <- raster('EN_0007.png')
EN08 <- raster('EN_0008.png')
EN09 <- raster('EN_0009.png')
EN10 <- raster('EN_0010.png')
EN11 <- raster('EN_0011.png')
EN12 <- raster('EN_0012.png')
EN13 <- raster('EN_0013.png')

#Otherwise
#rlist <- list.files(pattern= 'EN')
#rlist
#list_rast=lapply (rlist, raster) #lapply -> apply the raster function to rlist #use also <- oterwise =
# ENstack <- stack (list_rast)

cl <- colorRampPalette (c('red', 'orange', 'yellow'))(100)  #yellow show the NO2

par(mfrow=c(1,2))  
plot (EN01, col=cl) #january
plot (EN13, col=cl) #march

#difference between the images

difno2 <- EN01 - EN13
cldif <- colorRampPalette (c('blue', 'black', 'yellow'))(100)
plot (difno2, col=cldif) #show the area with a big decrease of NO2

# plot all the data images
plot (EN01, col=cl)
plot (EN02, col=cl)
plot (EN03, col=cl)
plot (EN04, col=cl)
plot (EN05, col=cl)
plot (EN06, col=cl)
plot (EN07, col=cl)
plot (EN08, col=cl)
plot (EN09, col=cl)
plot (EN10, col=cl)
plot (EN11, col=cl)
plot (EN12, col=cl)
plot (EN13, col=cl)

#all graph
par(mfrow=c(4,4))
plot (EN01, col=cl)
plot (EN02, col=cl)
plot (EN03, col=cl)
plot (EN04, col=cl)
plot (EN05, col=cl)
plot (EN06, col=cl)
plot (EN07, col=cl)
plot (EN08, col=cl)
plot (EN09, col=cl)
plot (EN10, col=cl)
plot (EN11, col=cl)
plot (EN12, col=cl)
plot (EN13, col=cl)

# stack function-> take a list of data and put them togheter # make a stack
EN <- stack(EN01,EN02,EN03,EN04,EN05,EN06,EN07,EN08,EN09,EN10,EN11,EN12,EN13)
plot (EN, col=cl)

# plot (RGB)
plotRGB (EN, red=EN13, green=EN13, blue=EN01, stretch='lin')
plotRGB (EN, red=EN13, green=EN07, blue=EN01, stretch='lin')

# make a boxplot

boxplot (EN,horizontal=T, axes=T, outline=F, col='red',xlab='NO2 - 8bit', ylab='Period')


### 10- R_spatial.r ###

# R spatial 

install.packages('sp')
library(sp)

data(meuse)

head(meuse)  #first rows of the table

coordinates(meuse) = ~ x+y

plot(meuse)

# sp plot is used to plot elements like zinc, lead etc.. spread in space

spplot(meuse,'lead')  # concentration of lead in space, '' to recall the column of interest 

#Exercise: plot the concentration of copper
spplot(meuse,'copper', main='concentrarion of copper')

Exercise: see copper and zinc in two different panel but in the same function
spplot(meuse,c('copper','zinc'))  #c=array function

# Rather than using colours, let's make us of bubbles
bubble(meuse,'zinc')

#do the same for lead
bubble(meuse,'lead')
bubble(meuse,'lead',col='red')

### Installing the ggplot2 library/package

install.packages('ggplot2')

library(ggplot2)

#ecological dataframe
#biofuels
biofuels<- c(120, 200, 350, 570, 750) #array of values: c
#oxydative enzimes
oxydative<- c(1200, 1300, 21000, 34000, 50000)

#dataframe
d<- data.frame(biofuels,oxydative)
d

#Ggplot function
ggplot(d, aes (x= biofuels, y= oxydative))

#geom_point function -> put the data in the graph
ggplot(d, aes (x= biofuels, y= oxydative)) + geom_point()

ggplot(d, aes (x= biofuels, y= oxydative)) + geom_point(col='red', size=5)

# lines instead points
ggplot(d, aes (x= biofuels, y= oxydative)) + geom_line()

# lines and points on the graph
ggplot(d, aes (x= biofuels, y= oxydative)) + geom_line() + geom_point(col='red', size=5)

# polygons -> show the spread of the data
ggplot(d, aes (x= biofuels, y= oxydative)) + geom_polygon()

### IMPORT DATA FROM AN EXTERNAL SOURCE ###

#setwd for windows
setwd('C:/Users/Sery/Desktop/Lab')

covid<- read.table('covid_agg.csv', header=TRUE)
covid
head(covid)

summary(covid)

## ggplot2
library(ggplot2)
ggplot(covid, aes (x= lon, y= lat)) + geom_point()  #graph of the world with coordinate, one pointxcountry

#changing the size of the data(point) in relation of number of cases ---> size = cases
ggplot(covid, aes (x= lon, y= lat, size = cases)) + geom_point()
